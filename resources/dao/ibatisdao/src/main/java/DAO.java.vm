##DAO实现代码生成模版
##使用到的变量有：
##$!{gb.packageName}包名，如：net.letuu.order
##$!{gb.userName}机器登录用户名，如：microboss
##$!{gb.nowDate}当前日期，如：2013-05-02
##$!{tbb.className}类名，如：UserInfo
##$!{tbb.objectName}对象名，如：userInfo
##宏定义,用于单一对象的删除与查找的参数
#macro(primaryKey)
	#foreach($pkcol in $tbb.pkcol) $!{pkcol.propertyType} $!{pkcol.propertyName}  import org.apache.commons.lang.StringUtils;#if(!$foreach.last), #end #end
	#if($conf.isSplitTable()), String tableId#end
#end
##宏定义,用于多对象的删除与查找的方法体
#macro( primaryKeyBody )
        Map<String, Object>params=new HashMap<String, Object>(1);
	#foreach($pkcol in $tbb.pkcol)
            params.put("$!{pkcol.propertyName}", $!{pkcol.propertyName});
	#end
	#if($conf.isSplitTable())
            params.put("tableId", tableId);
	#end
#end
##宏定义,用于多对象的删除与查找的参数
#macro( primaryKeys $tbb )
	#foreach($pkcol in $tbb.pkcol)#if($foreach.last)List<$!{pkcol.propertyType}> $!{pkcol.propertyName}List#else$!{pkcol.propertyType} $!{pkcol.propertyName},#end#end
	#if($conf.isSplitTable()), String tableId#end
#end
##宏定义,用于多对象的删除与查找的方法体
#macro( primaryKeysBody $tbb )
        Map<String, Object>params=new HashMap<String, Object>(1);
	#foreach($pkcol in $tbb.pkcol)
		#if($foreach.last)
                params.put("keys", $!{pkcol.propertyName}List);
		#else
                params.put("$!{pkcol.propertyName}", $!{pkcol.propertyName});
		#end
	#end
	#if($conf.isSplitTable())
            params.put("tableId", tableId);
	#end
#end
#set($conf=$!{tbb.conf})
#set($PO = $!{gb.objSuffix})
#set($clear = "")
##---------------------模块名称--------------------------------
#set($module_name = $!{gb.moduleName})
##---------------------模块名称--------------------------------
        package $!{gb.packageName}.dao.${module_name};

import com.alibaba.cobarclient.dao.MysdalBaseDao;
import com.ibatis.sqlmap.client.SqlMapClient;
import org.springframework.stereotype.Repository;

import javax.annotation.Resource;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
#foreach($cb in $tbb.colList)
	#if($!{cb.propertyType}=="Clob"&&!$clob)
    import java.sql.Clob;
		#set($clob=true)
	#elseif($!{cb.propertyType}=="Blob"&&!$blob)
    import java.sql.Blob;
		#set($blob=true)
	#elseif($!{cb.propertyType}=="Date"&&!$d)
    import java.util.Date;
		#set($d=true)
	#elseif($!{cb.propertyType}=="BigDecimal"&&$!bigDecimal)
    import java.math.BigDecimal;
		#set($bigDecimal=true)
	#end
#end
#if($conf.isNeedPage())
import java.util.Collections;
import $!{gb.packageName}.common.db.Result;
import $!{gb.packageName}.query.${module_name}.$!{tbb.className}Query;
#end
import $!{gb.packageName}.domain.${module_name}.$!{tbb.className}${PO};

/**
 *
 * @author  $!{gb.userName}
 * Date    $!{gb.nowDate}
 */
@Repository
public class $!{tbb.className}DAO extends MysdalBaseDao {

##	@Resource
##	SqlMapClient sqlMapClientTemplate;

    /**
     * 添加
     */
    public Integer add$!{tbb.className}${PO}($!{tbb.className}${PO} $!{tbb.objectName}) {
	##		return (Integer)this.sqlMapClientTemplate.insert("${tbb.className}.insert${tbb.className}${PO}", $!{tbb.objectName});
        return (Integer) getSqlMapClientTemplate().insert("${tbb.className}.insert${tbb.className}${PO}", $!{tbb.objectName});
    }

	#if($conf.isGetByKey())
        /**
        * 根据主键查找
        */
        public $!{tbb.className}${PO} get$!{tbb.className}${PO}ByKey(#primaryKey()) {
			#primaryKeyBody()
            return ($!{tbb.className}$PO) getSqlMapClientTemplate().queryForObject(
                    "$!{tbb.className}.get$!{tbb.className}${PO}ByKey", params);
        }

	#end
	#if($conf.isGetByKeys())
        /**
		 * 根据主键批量查找
		 */
        public List<$!{tbb.className}${PO}> get$!{tbb.className}${PO}ByKeys(#primaryKeys()) {
			#primaryKeysBody()
            return (List<$!{tbb.className}${PO}>) getSqlMapClientTemplate().queryForList("$!{tbb.className}.get$!{tbb.className}${PO}sByKeys", params);
        }
	#end
	#if($conf.isDelByKey())
        /**
		 * 根据主键删除
		 */
        public Integer deleteByKey(#primaryKey($tbb)) {
			#primaryKeyBody($tbb)
            return (Integer) getSqlMapClientTemplate().delete("$!{tbb.className}.deleteByKey", params);
        }
	#end
	#if($conf.isDelByKeys())
        /**
		 * 根据主键批量删除
		 */
        public Integer deleteByKeys(#primaryKeys($tbb)) {
			#primaryKeysBody($tbb)
            return (Integer) getSqlMapClientTemplate().delete("$!{tbb.className}.deleteByKeys", params);
        }

	#end
	#if($conf.isUpdateKey())
        /**
		 * 根据主键更新
		 */
        public Integer update$!{tbb.className}${PO}ByKey($!{tbb.className}${PO} $!{tbb.objectName}) {
            return (Integer) getSqlMapClientTemplate().update("${tbb.className}.update${tbb.className}${PO}ByKey", $!{tbb.objectName});
        }
	#end
##分页
	#if($conf.isNeedPage())
        /**
       * 根据条件查询分页查询
       */
        @SuppressWarnings("unchecked")
        public Result<$!{tbb.className}${PO}> get$!{tbb.className}${PO}ListWithPage($!{tbb.className}Query $!{tbb.objectName}Query) {
            Result<$!{tbb.className}${PO}> rs = new Result<$!{tbb.className}${PO}>();
		##		try{
			#if($conf.isCustomField())
                rs.setCount((Integer) getSqlMapClientTemplate().queryForObject("$!{tbb.className}.get$!{tbb.className}ListCount", $!{tbb.objectName}Query));
                if (StringUtils.isNotEmpty($!{tbb.objectName}Query.getFields())) {
                    rs.setList((List<$!{tbb.className}${PO}>) getSqlMapClientTemplate().queryForList("$!{tbb.className}.get$!{tbb.className}ListWithPageFields", $!{tbb.objectName}Query));
                } else {
                    rs.setList((List<$!{tbb.className}${PO}>) getSqlMapClientTemplate().queryForList("$!{tbb.className}.get$!{tbb.className}ListWithPage", $!{tbb.objectName}Query));
                }
			#else
                rs.setList((List<$!{tbb.className}${PO}>) getSqlMapClientTemplate().queryForList("$!{tbb.className}.get$!{tbb.className}ListWithPage", $!{tbb.objectName}Query));
			#end
		##		}catch(SQLException e){
		##			rs.setSuccess(false);
		##			rs.setCount(0);
		##			rs.setList(Collections.EMPTY_LIST);
		##			rs.setErrorMsg(e.toString());
		##		}
            return rs;
        }
	#end
    /**
	 * 根据条件查询
	 */
    @SuppressWarnings("unchecked")
    public List<$!{tbb.className}${PO}> get$!{tbb.className}${PO}List($!{tbb.className}Query $!{tbb.objectName}Query) {
		#if($conf.isCustomField())
            if (StringUtils.isNotEmpty($!{tbb.objectName}Query.getFields())) {
                return (List<$!{tbb.className}${PO}>) getSqlMapClientTemplate().queryForList("$!{tbb.className}.get$!{tbb.className}ListFields", $!{tbb.objectName}Query);
            }
		#end
        return (List<$!{tbb.className}${PO}>) getSqlMapClientTemplate().queryForList("$!{tbb.className}.get$!{tbb.className}List", $!{tbb.objectName}Query);
    }

##自定义查询
	#if($conf.selectMap.size()>0)
		#foreach($sel in $conf.selectMap.keySet())
			#if( $conf.selectMap.get($sel) && $conf.selectMap.get($sel).size()>0)${clear}
                public #if($sel.indexOf(
					"List")>=0)List<$!{tbb.className}${PO}>#{else}$!{tbb.className}${PO}#end ${sel}(#foreach($w in $conf.selectMap.get($sel))#{if}($!{tbb.colMap.get($w)})#{if}($!{velocityCount}>1),#{end}$!{tbb.colMap.get($w).propertyType} $!{tbb.colMap.get($w).propertyName}#{end}#{end})throws SQLException

                {
                    Map<String, Object> params = new HashMap<String, Object>();
					#foreach($w in $conf.selectMap.get($sel))#if($!{tbb.colMap.get($w)})
                        params.put("$!{tbb.colMap.get($w).propertyName}", $!{tbb.colMap.get($w).propertyName});
					#end
					#end
						#if($sel.indexOf(
							"List")>=0)List<$!{tbb.className}${PO}> result = (List<$!{tbb.className}${PO}>) getSqlMapClientTemplate().queryForList(
                                "$!{tbb.className}.${sel}", params);
					#else$!{tbb.className}${PO} result = ($!{tbb.className}${PO})
                        getSqlMapClientTemplate().queryForObject("$!{tbb.className}.${sel}", params);
					#end
                    return result;
                }
			#end
		#end
	#end

}